import telebot
from telebot import types
from mnemonic import Mnemonic
import time

TOKEN = 7987309610:AAHJkAlbPTxhToO9iyNvnh6I43kacWSP81M # üîÅ –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

bot = telebot.TeleBot(TOKEN)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üíº –ö–æ—à–µ–ª—ë–∫"))
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–∂–º–∏ ¬´–ö–æ—à–µ–ª—ë–∫¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üíº –ö–æ—à–µ–ª—ë–∫")
def wallet_menu(message):
    chat_id = message.chat.id

    # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    msg = bot.send_message(chat_id, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ—à–µ–ª—ë–∫...")
    time.sleep(2)
    bot.edit_message_text("‚úÖ –ö–æ—à–µ–ª—ë–∫ –≥–æ—Ç–æ–≤!", chat_id, msg.message_id)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–¥-—Ñ—Ä–∞–∑—ã
    mnemo = Mnemonic("english")
    seed_phrase = mnemo.generate(strength=128)  # 12 —Å–ª–æ–≤
    seed_words = seed_phrase.split()
    user_data[chat_id] = {
        "seed_phrase": seed_phrase,
        "words": seed_words
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–¥-—Ñ—Ä–∞–∑—É
    bot.send_message(chat_id, f"üí° –≠—Ç–æ –≤–∞—à–∞ —Å–∏–¥-—Ñ—Ä–∞–∑–∞:\n\n<code>{seed_phrase}</code>\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –Ω–∞–¥—ë–∂–Ω–æ–º –º–µ—Å—Ç–µ!", parse_mode="HTML")

    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 3 —Å–ª–æ–≤
    bot.send_message(chat_id, "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ 7-–µ —Å–ª–æ–≤–æ –∏–∑ –≤–∞—à–µ–π —Å–∏–¥-—Ñ—Ä–∞–∑—ã:")
    bot.register_next_step_handler(message, lambda m: confirm_word(m, position=6))  # 7-–µ —Å–ª–æ–≤–æ (index 6)

def confirm_word(message, position):
    chat_id = message.chat.id
    word = message.text.strip().lower()

    if user_data.get(chat_id) is None or position >= len(user_data[chat_id]["words"]):
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–∞—Ç—å '–ö–æ—à–µ–ª—ë–∫'.")
        return

    if user_data[chat_id]["words"][position] != word:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        bot.register_next_step_handler(message, lambda m: confirm_word(m, position=position))
        return

    if position == 6:
        bot.send_message(chat_id, "‚úÖ –í–µ—Ä–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ 2-–µ —Å–ª–æ–≤–æ:")
        bot.register_next_step_handler(message, lambda m: confirm_word(m, position=1))
    elif position == 1:
        bot.send_message(chat_id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ 11-–µ —Å–ª–æ–≤–æ:")
        bot.register_next_step_handler(message, lambda m: confirm_word(m, position=10))
    elif position == 10:
        bot.send_message(chat_id, "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
        show_wallet_main_menu(message)

def show_wallet_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"),
        types.KeyboardButton("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å"),
        types.KeyboardButton("üîÅ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏"),
    )
    markup.add(
        types.KeyboardButton("üì• –í—ã–≤–æ–¥"),
        types.KeyboardButton("üîÑ –û–±–º–µ–Ω"),
        types.KeyboardButton("üßæ –ò—Å—Ç–æ—Ä–∏—è")
    )

    bot.send_message(message.chat.id, "–í—ã –≤–æ—à–ª–∏ –≤ –∫–æ—à–µ–ª—ë–∫. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# üîÅ –û–±–º–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)
@bot.message_handler(func=lambda message: message.text == "üîÑ –û–±–º–µ–Ω")
def exchange_crypto(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    tokens = ["BTC", "ETH", "BNB", "SOL", "TRX", "TON", "LTC"]
    for token in tokens:
        markup.add(types.KeyboardButton(token))
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å USDT:", reply_markup=markup)
    bot.register_next_step_handler(message, process_exchange_selection)

def process_exchange_selection(message):
    token = message.text.strip().upper()
    if token not in ["BTC", "ETH", "BNB", "SOL", "TRX", "TON", "LTC"]:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    amount = 100
    discount = 4  # %
    final_amount = amount * (1 - discount / 100)

    bot.send_message(
        message.chat.id,
        f"üí± –û–±–º–µ–Ω USDT ‚Üí {token}\n"
        f"–°—É–º–º–∞: {amount} USDT\n"
        f"–°–∫–∏–¥–∫–∞: {discount}%\n"
        f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ: ~{round(final_amount, 2)} {token}"
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—á–µ—Ä–µ–∑ polling)
if __name__ == '__main__':
    bot.infinity_polling()
